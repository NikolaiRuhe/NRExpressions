%option reentrant
%option bison-bridge
%option bison-locations
%option noyywrap
%option prefix="NRX_"
%option yylineno

%{
#import <Foundation/Foundation.h>
#import "NRXParser.h"
#import "NRXTypes.h"
#import "xlocale.h"

#pragma clang diagnostic ignored "-Wdocumentation"
#pragma clang diagnostic ignored "-Wpadded"
#pragma clang diagnostic ignored "-Wunreachable-code"
#pragma clang diagnostic ignored "-Wmissing-variable-declarations"

#define YY_EXTRA_TYPE  NRXParser*
//#define YY_USER_ACTION yylloc->first_line = yylineno;

// Don't know why these prototypes are missing...
int NRX_get_column(void *scanner);
void NRX_set_column(int column_no , void *scanner);

static void *parseNumber(const char* str)
{
	NSString *string = [[NSString alloc] initWithUTF8String:str];
	return (__bridge_retained void *)NRXDecimalNumberFromString(string);
}

static void *parseSymbol(const char* str)
{
	return (__bridge_retained void *)[[NSString alloc] initWithUTF8String:str];
}

static inline void convertDataToString(union YYSTYPE *yylval)
{
	NSData *data = (__bridge_transfer NSData *)(yylval->node);
	NSString *string = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
	yylval->node = ((__bridge_retained void *) string);
}

#ifdef DEBUG_LEXER
#define RETURN_TOKEN(token) \
	{ \
		NSString *tokenString = nil; \
		if (token <= 127) \
			tokenString = [NSString stringWithFormat:@"%c", token]; \
		else if (token == SYMBOL) \
			tokenString = @"SYMBOL"; \
		else if (token == STRING) \
			tokenString = @"STRING"; \
		else \
			tokenString = [NSString stringWithFormat:@"%d", token]; \
		NSLog(@"token '%s': %@", yytext, tokenString); \
	} \
	return token
#else
	#define RETURN_TOKEN(token) \
		return token
#endif

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconversion"
#pragma clang diagnostic ignored "-Wunused-function"

%}

%x DOUBLE_QUOTED_STRING SINGLE_QUOTED_STRING
%x INCOMMENT

%%

"&&"            RETURN_TOKEN(AND);
"and"           RETURN_TOKEN(AND);
"||"            RETURN_TOKEN(OR);
"or"            RETURN_TOKEN(OR);
">="            RETURN_TOKEN(GE);
"<="            RETURN_TOKEN(LE);
"=="            RETURN_TOKEN(EQ);
"="             RETURN_TOKEN(EQ);
"where"         RETURN_TOKEN(WHERE);
"!="            RETURN_TOKEN(NE);
":="            RETURN_TOKEN(ASSIGNMENT);
"while"         RETURN_TOKEN(WHILE);
"for"           RETURN_TOKEN(FOR);
"in"            RETURN_TOKEN(IN);
"if"            RETURN_TOKEN(IF);
"else"          RETURN_TOKEN(ELSE);
"print"         RETURN_TOKEN(PRINT);
"true"          { yylval->node = (__bridge_retained void *)[NRXBoolean yes]; RETURN_TOKEN(BOOLTOKEN); }
"false"         { yylval->node = (__bridge_retained void *)[NRXBoolean no];  RETURN_TOKEN(BOOLTOKEN); }
"NULL"          { yylval->node = (__bridge_retained void *)[NSNull null]; RETURN_TOKEN(NULLTOKEN); }
"try"           RETURN_TOKEN(TRY);
"catch"         RETURN_TOKEN(CATCH);
"assert"        RETURN_TOKEN(ASSERT);
"break"         RETURN_TOKEN(BREAK);
"continue"      RETURN_TOKEN(CONTINUE);
"error"         RETURN_TOKEN(ERROR);
"return"        RETURN_TOKEN(RETURN);

\$\$[_a-zA-Z][_a-zA-Z0-9]* {
                yylval->node = parseSymbol(yytext + 2);
                RETURN_TOKEN(ID_MULTI_LOOKUP);
            }

\$[_a-zA-Z][_a-zA-Z0-9]* {
                yylval->node = parseSymbol(yytext + 1);
                RETURN_TOKEN(ID_SINGLE_LOOKUP);
            }

[-()<>=+*/;{}!?:.] {
				RETURN_TOKEN(*yytext);
            }

0           {
                yylval->node = parseNumber(yytext);
                RETURN_TOKEN(INTEGER);
            }

[0-9]+      {
                yylval->node = parseNumber(yytext);
                RETURN_TOKEN(INTEGER);
            }

[0-9]+\.[0-9]* {
				yylval->node = parseNumber(yytext);
                RETURN_TOKEN(FLOAT);
            }

\.[0-9]*    {
                yylval->node = parseNumber(yytext);
                RETURN_TOKEN(FLOAT);
            }


[_a-zA-Z][_a-zA-Z0-9]* { 
                yylval->node = parseSymbol(yytext);
                RETURN_TOKEN(SYMBOL);
            }

\"                         { BEGIN DOUBLE_QUOTED_STRING; yylval->node = (__bridge_retained void *)[ [NSMutableData alloc] init]; }
<DOUBLE_QUOTED_STRING>\\n  { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\n" length:1]; }
<DOUBLE_QUOTED_STRING>\\t  { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\t" length:1]; }
<DOUBLE_QUOTED_STRING>\\\" { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\"" length:1]; }
<DOUBLE_QUOTED_STRING>\\\\ { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\\" length:1]; }
<DOUBLE_QUOTED_STRING>\"   { BEGIN 0; convertDataToString(yylval); RETURN_TOKEN(STRING); }
<DOUBLE_QUOTED_STRING>\n   { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\n" length:1]; }
<DOUBLE_QUOTED_STRING>.    { [((__bridge NSMutableData *)(yylval->node)) appendBytes:yytext length:1]; }

'                          { BEGIN SINGLE_QUOTED_STRING; yylval->node = (__bridge_retained void *)[ [NSMutableData alloc] init]; }
<SINGLE_QUOTED_STRING>\\n  { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\n" length:1]; }
<SINGLE_QUOTED_STRING>\\t  { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\t" length:1]; }
<SINGLE_QUOTED_STRING>\\'  { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"'"  length:1]; }
<SINGLE_QUOTED_STRING>\\\\ { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\\" length:1]; }
<SINGLE_QUOTED_STRING>'    { BEGIN 0; convertDataToString(yylval); RETURN_TOKEN(STRING); }
<SINGLE_QUOTED_STRING>\n   { [((__bridge NSMutableData *)(yylval->node)) appendBytes:"\n" length:1]; }
<SINGLE_QUOTED_STRING>.    { [((__bridge NSMutableData *)(yylval->node)) appendBytes:yytext length:1]; }

\/\*            { BEGIN INCOMMENT; }
<INCOMMENT>\*\/ { BEGIN 0; }
<INCOMMENT>.    ;
<INCOMMENT>\n   ;

\/\/.*          ; // ignore c++ style comments

[ \t\n\r]+      ; /* ignore whitespace */

.               { RETURN_TOKEN(*yytext); }

%%

void NRXParserInit(NRXParser *parser)
{
	NRX_lex_init_extra(parser, &(parser->scanner));
	parser->buffer = yy_scan_string(parser->sourceString, parser->scanner);
}

void NRXParserCleanup(NRXParser *parser)
{
	yy_delete_buffer(parser->buffer, parser->scanner);
	NRX_lex_destroy(parser->scanner);
}

#pragma clang diagnostic pop
